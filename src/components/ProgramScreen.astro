---
import { site } from "../data/site";
const a = site.author;
---

<div class="program-closed">
    <h1 id="sad-smile">\(@_o)/</h1>
    <p>Reload page to get back the program screen.</p>
</div>
<div id="program-screen" class="program-screen draggable">
    <div id="program-header" class="program-header">
        <div class="mac-buttons">
            <span id="close-button" class="close"></span>
            <span id="minimize-button" class="minimize"></span>
            <span id="maximize-button" class="maximize"></span>
        </div>
    </div>
    <div class="program-body">
        <h3 style={`--length: ${a.firstname.length}ch;`}>
            {a.firstname}
            {a.lastname}
        </h3>
        <ul aria-hidden="true">
            <li style="color: hsl(var(--accent));">
                {"".padEnd(a.lastname.length + a.firstname.length + 3, "-")}
            </li>
            <li>
                <strong>E-Mail:</strong> mail@bauer-jakob.de
            </li>
        </ul>
        <ul>
            {
                a.socials.map((s) => (
                    <li>
                        <strong>{s.name}: </strong>
                        <a
                            href={s.link}
                            rel="nofollow noreferrer"
                            target="_blank"
                        >
                            {s.link}
                        </a>
                    </li>
                ))
            }
            <li aria-hidden="true" class="tilted">~</li>
        </ul>

        <p class="program-screen-content">{a.bio}</p>
    </div>
</div>

<style lang="scss">
    .program-closed {
        display: none;

        #sad-smile {
            font-size: 3rem;
            text-align: center;
            font-family: "Franklin Gothic Medium", "Arial Narrow", Arial,
                sans-serif;
            color: hsla(224, 27%, 63%, 0.3);
            user-select: none;
        }
        p {
            margin-top: 1rem;
            color: hsla(224, 27%, 63%, 0.7);
        }
    }

    @media screen and (min-width: 30rem) {
        .draggable {
            position: absolute;
            margin-left: auto;
            margin-right: auto;
            border-radius: 12px;
            overflow: hidden;
            min-width: 30rem !important;

            left: calc(50% - 15rem);
        }

        .program-screen {
            margin: 0 !important;
        }

        .program-header {
            cursor: grab;
        }
    }

    .maximize-window {
        max-width: 100vw !important;
        width: 100vw !important;
        height: 100vh !important;
        left: 0 !important;
        top: 0 !important;

        .program-header {
            cursor: default;
        }

        .mac-buttons {
            .minimize {
                background-color: #eeeeee52 !important;
                cursor: default !important;
            }
        }
    }

    .close-window {
        display: none;
    }

    .program-screen {
        max-width: 30rem;
        min-width: 15rem;
        overflow: hidden;
        border-radius: 0.5em;
        text-align: start;
        font-weight: 700;
        background-color: hsl(var(--base-darker));
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        border: 1px solid #4b4b4b33;

        margin: 0 auto;

        .program-header {
            display: flex;
            align-items: center;
            padding: 7px 10px;
            background-color: hsl(221.7, 16.3%, 27.6%, 0.3);
            user-select: none;
            border-bottom: 1px solid #2c2c2c;

            .mac-buttons {
                display: flex;
                gap: 8px;
                margin-right: auto;

                span {
                    display: block;
                    width: 12px;
                    height: 12px;
                    border-radius: 50%;
                    background-color: #ff5f57; /* Close button */
                    cursor: pointer;
                }

                .minimize {
                    background-color: #ffbd2e; /* Minimize button */
                }

                .maximize {
                    background-color: #28c940; /* Maximize button */
                }
            }
        }

        .program-body {
            padding: 1em 2rem;
            h3,
            strong {
                color: hsl(var(--accent-2));
            }
            strong {
                font-family: "HackBold";
            }
            .tilted {
                color: hsl(var(--accent));
            }
        }

        .program-screen-content {
            margin-top: 0.5rem;
        }
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        const draggableElement = document.getElementById("program-screen");
        const headerElement = document.getElementById("program-header");
        const maximizeButtonElement =
            document.getElementById("maximize-button");
        const closeButtonElement = document.getElementById("close-button");
        const minimizeButtonElement =
            document.getElementById("minimize-button");

        if (minimizeButtonElement === null) {
            console.error("Could not find minimize button element");
            return;
        }

        if (closeButtonElement === null) {
            console.error("Could not find close button element");
            return;
        }

        if (maximizeButtonElement === null) {
            console.error("Could not find maximize button element");
            return;
        }

        if (draggableElement === null || headerElement === null) {
            console.error("Could not find draggable element or header element");
            return;
        }

        // close button
        closeButtonElement.addEventListener("click", () => {
            draggableElement.classList.add("close-window");

            var hidden: any = document.getElementsByClassName("program-closed");
            for (let i = 0; i < hidden.length; i++) {
                hidden[i].style.display = "block";
            }
        });

        minimizeButtonElement.addEventListener("click", () => {
            if (fullscreenMode) {
                return;
            }

            draggableElement.classList.add("close-window");

            var hidden: any = document.getElementsByClassName("program-closed");
            for (let i = 0; i < hidden.length; i++) {
                hidden[i].style.display = "block";
            }
        });
        // maximize button
        let fullscreenMode = false;

        maximizeButtonElement.addEventListener("click", () => {
            draggableElement.classList.toggle("maximize-window");
            fullscreenMode = !fullscreenMode;
        });

        // dragable window

        let isDragging = false;
        let offsetX = 0;
        let offsetY = 0;

        // Function to get the root font size
        function getRootFontSize() {
            return parseFloat(
                getComputedStyle(document.documentElement).fontSize
            );
        }

        // Function to check window size in rem units
        function checkWindowSize(): boolean {
            if (draggableElement === null || headerElement === null) {
                console.error(
                    "Could not find draggable element or header element"
                );

                return false;
            }

            const minRem = 30; // Minimum width in rem
            const rootFontSize = getRootFontSize();
            const minWidthInPixels = minRem * rootFontSize;

            if (window.innerWidth >= minWidthInPixels) {
                return true;
            }

            return false;
        }

        window.addEventListener("resize", (e) => {
            if (!checkWindowSize()) {
                isDragging = false;
                draggableElement.style.left = "calc(50% - 15rem)";
                draggableElement.style.top = "initial";
                document.removeEventListener("mousemove", onMouseMove);
                document.removeEventListener("mouseup", onMouseUp);
            }
        });

        headerElement.addEventListener("mousedown", (e) => {
            if (!checkWindowSize() || fullscreenMode) {
                return;
            }

            // Only start dragging if the left mouse button is pressed
            if (e.button !== 0) return;

            isDragging = true;
            const rect = draggableElement.getBoundingClientRect();
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;

            document.addEventListener("mousemove", onMouseMove);
            document.addEventListener("mouseup", onMouseUp);
        });

        function onMouseMove(e: any) {
            if (draggableElement === null || headerElement === null) {
                console.error(
                    "Could not find draggable element or header element"
                );
                return;
            }

            if (isDragging) {
                const newLeft = e.clientX - offsetX;
                const newTop = e.clientY - offsetY;

                // Get the viewport dimensions
                const viewportWidth = window.innerWidth;
                const viewportHeight = window.innerHeight;

                // Get the dimensions of the draggable element
                const elementWidth = draggableElement.offsetWidth;
                const elementHeight = draggableElement.offsetHeight;

                // Ensure the element stays within the viewport boundaries
                if (newLeft < 0) {
                    draggableElement.style.left = "0px";
                } else if (newLeft + elementWidth > viewportWidth) {
                    draggableElement.style.left = `${
                        viewportWidth - elementWidth
                    }px`;
                } else {
                    draggableElement.style.left = `${newLeft}px`;
                }

                if (newTop < 0) {
                    draggableElement.style.top = "0px";
                } else if (newTop + elementHeight > viewportHeight) {
                    draggableElement.style.top = `${
                        viewportHeight - elementHeight
                    }px`;
                } else {
                    draggableElement.style.top = `${newTop}px`;
                }
            }
        }

        function onMouseUp() {
            isDragging = false;
            document.removeEventListener("mousemove", onMouseMove);
            document.removeEventListener("mouseup", onMouseUp);
        }
    });
</script>
